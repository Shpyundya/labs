#include <math.h>
#include <stdio.h>

typedef enum kOpts { OPT_Q, OPT_M, OPT_T } kOpts;

int GetOpts(int argc, char** argv, kOpts* option, double numbers[]) {
  if (!((argc >= 4) && (argc <= 6))) {
    return 1;
  }

  const char* procceding_option = argv[1];
  if (((procceding_option[0] == '/') || (procceding_option[0] == '-')) && !(procceding_option[2])) {
    switch (procceding_option[1]) {
      case 'q':
        *option = OPT_Q;
        if (argc != 6) {
          return 1;
        }
        break;
      case 'm':
        *option = OPT_M;
        if (argc != 4) {
          return 1;
        }
        break;
      case 't':
        *option = OPT_T;
        if (argc != 6) {
          return 1;
        }
        break;
      default:
        return 1;
        break;
    }
  } else {
    return 1;
  }

  for (int i = 2; i < argc; ++i) {
    double sign = 1;
    int index = 0;
    int having_real_num = 0;
    const char* number = argv[i];

    for (int k = 0; number[k]; ++k) {
      if (number[k] >= '0' && number[k] <= '9') {
        numbers[i - 2] *= 10;
        numbers[i - 2] += number[k] - '0';
        having_real_num = 1;
      } else if (number[k] == '.') {
        if (!(number[k + 1] >= '0' && number[k + 1] <= '9')) {
          return 1;
        }
        index = k + 1;
        break;
      } else if (number[k] == '-' && k == 0) {
        if (!(number[k + 1] >= '0' && number[k + 1] <= '9')) {
          return 1;
        }
        sign = -1;
      } else {
        return 1;
      }
    }

    double fractional_part = 0.1;
    if (index > 1) {  // если точка стоит не первой
      for (int j = index; number[j]; ++j) {
        if (number[j] >= '0' && number[j] <= '9') {
          numbers[i - 2] += (number[j] - '0') * fractional_part;
          fractional_part *= 0.1;
        } else {  // если что угодно, кроме цифры и точки, выводим ошибку
          return 1;
        }
      }
    } else if (having_real_num == 0) {  // если точки нет, но целая часть не
                                        // менялась, выводим ошибку
      return 1;
    }

    if (sign == -1) {
      if (numbers[i - 2] == 0) {
        return 1;
      } else {
        numbers[i - 2] = sign * numbers[i - 2];
      }
    }
  }

  return 0;
}

void HandlerOptQ(double numbers[4]) {
  double epsilon = numbers[0];
  if (epsilon <= 0) {
    printf("Epsilon cannot be negative or equal to 0\n");
    return;
  }

  int cnt_ab = 0;
  int cnt_ac = 0;
  int cnt_bc = 0;
  int cnt_no = 0;
  if (!(fabs(numbers[1] - numbers[2]) < epsilon &&
        fabs(numbers[2] - numbers[3]) < epsilon)) {
    if (fabs(numbers[1] - numbers[2]) < epsilon ||
        fabs(numbers[1] - numbers[3]) < epsilon ||
        fabs(numbers[2] - numbers[3]) < epsilon) {
      cnt_ab++;
      cnt_ac++;
      cnt_bc++;
    } else {
      cnt_no++;
    }
  } else {
    cnt_ab++;
  }
  
  for (int i = 1; i <= 3; i++) {
    for (int j = 1; j <= 3; j++) {
      if (i != j) {
        for (int k = 1; k <= 3; k++) {
          if (k != i && k != j) {
            double a = numbers[i];
            double b = numbers[j];
            double c = numbers[k];

            if ((cnt_ab == 1 && fabs(a - b) < epsilon) ||
                (cnt_ac == 1 && fabs(a - c) < epsilon) ||
                (cnt_bc == 1 && fabs(b - c) < epsilon) || cnt_no == 1) {
              if (fabs(a) < epsilon) {
                if (fabs(b) < epsilon) {
                  printf( "a = %.3lf, b = %.3lf, c = %.3lf:\nThe equation is neither quadratic nor linear\n\n",
                      a, b, c);
                  if (fabs(a - b) < epsilon) cnt_ab--;
                  if (fabs(a - c) < epsilon) cnt_ac--;
                  if (fabs(b - c) < epsilon) cnt_bc--;
                  break;
                } else {
                  double x = -c / b;
                  if (fabs(x) < epsilon) x = 0;
                  printf("a = %.3lf, b = %.3lf, c = %.3lf:\nx = %.3lf\n\n",
                      a, b, c, x);
                }
              } else {
                double discriminant = b * b - 4 * a * c;
                if (fabs(discriminant) < epsilon) {
                  double x = -b / (2 * a);
                  if (fabs(x) < epsilon) x = 0;
                  printf(
                      "a = %.3lf, b = %.3lf, c = %.3lf:\nx1 = x2 = %.3lf\n\n",
                      a, b, c, x);
                } else if (discriminant > 0) {
                  double fst_x = (-b + sqrt(discriminant)) / (2 * a);
                  if (fabs(fst_x) < epsilon) fst_x = 0;
                  double snd_x = (-b - sqrt(discriminant)) / (2 * a);
                  if (fabs(snd_x) < epsilon) snd_x = 0;
                  printf(
                      "a = %.3lf, b = %.3lf, c = %.3lf:\nx1 = %.3lf\nx2 = "
                      "%.3lf\n\n",
                      a, b, c, fst_x, snd_x);
                } else {
                  printf(
                      "a = %.3lf, b = %.3lf, c = %.3lf:\nNo real solutions\n\n",
                      a, b, c);
                }
              }              
            }

            if (fabs(a - b) < epsilon) cnt_ab--;
            if (fabs(a - c) < epsilon) cnt_ac--;
            if (fabs(b - c) < epsilon) cnt_bc--;
          }
        }
      }
    }
  }
}

void HandlerOptM(double numbers[4]) {
  double fst = floor(numbers[0]);
  double snd = floor(numbers[1]);
  if (fst != numbers[0] || snd != numbers[1]) {
    printf("Numbers must be integers\n");
    return;
  } else if (fst == 0 || snd == 0) {
    printf("Numbers must be non-zero\n");
  } else {
    if (!(fmod(numbers[0], numbers[1]))) {
      printf("%.lf is a multiple of %.lf\n", fst, snd);
    } else {
      printf("%.lf is not a multiple of %.lf\n", fst, snd);
    }
  }
}

void HandlerOptT(double numbers[4]) {
  double epsilon = numbers[0];
  double a = numbers[1];
  double b = numbers[2];
  double c = numbers[3];
  if (epsilon <= 0) {
    printf("Epsilon cannot be negative or equal to 0\n");
    return;
  }

  if (a < epsilon || b < epsilon || c < epsilon) {
    printf("The lengths of the sides of the triangle cannot be negative or equal to 0\n");
    return;
  }
  
  int flag = 0;
  double hypotenuse = a;
  if (b - hypotenuse > epsilon) hypotenuse = b;
  if (c - hypotenuse > epsilon) {
    hypotenuse = c;
    if (fabs(c * c - (a * a + b * b)) < epsilon) flag = 1;
  } else if (fabs(hypotenuse - b) < epsilon && fabs(b * b - (a * a + c * c)) < epsilon) {
    flag = 1;
  } else if (fabs(hypotenuse - a) < epsilon && fabs(a * a - (b * b + c * c)) < epsilon) {
    flag = 1;
  }
  if (flag == 1) {
    printf("The numbers are the lengths of the sides of the right triangle\n");
  } else {
    printf("The numbers are not the lengths of the sides of the right triangle\n");
  }
}

int main(int argc, char** argv) {
  kOpts opt;
  double procceed_number[4] = {0};
  void (*handlers[3])(double[4]) = {HandlerOptQ, HandlerOptM, HandlerOptT};
  if (GetOpts(argc, argv, &opt, procceed_number)) {
    printf("%s", "Incorrect option");
    return 1;
  }

  handlers[opt](procceed_number);

  return 0;
}
