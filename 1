#include <math.h>
#include <stdio.h>

typedef enum kOpts { OPT_H, OPT_P, OPT_S, OPT_E, OPT_A, OPT_F } kOpts;

int GetOpts(int argc, char** argv, kOpts* option, int* number) {
    if (argc != 3) {
        return 1;
    }

    for (int i = 1; i <= 2; ++i) {
        const char* procceding_option = argv[i]; //если аргументов НЕ 3, то возвращает ошибку
        int sign = 1;
        long long int limit_control = 0;
        if ((procceding_option[0] == '/' ||
            (procceding_option[0] == '-' &&
                (procceding_option[1] > '9' || procceding_option[1] < '1'))) &&
            !(procceding_option[2])) {
            switch (procceding_option[1]) {
            case 'h':
                *option = OPT_H;
                break;
            case 'p':
                *option = OPT_P;
                break;
            case 's':
                *option = OPT_S;
                break;
            case 'e':
                *option = OPT_E;
                break;
            case 'a':
                *option = OPT_A;
                break;
            case 'f':
                *option = OPT_F;
                break;
            default:
                return 1;
                break;
            }
        }
        else { //проверяем int или нет
            for (int k = 0; procceding_option[k]; ++k) {
                if (procceding_option[k] >= '0' && procceding_option[k] <= '9') {
                    limit_control =
                        limit_control * 10 + sign * (procceding_option[k] - '0');
                    if (sign == 1) {
                        if (limit_control <= 2147483647) {
                            *number *= 10;
                            *number += sign * (procceding_option[k] - '0');
                        }
                        else {
                            return 1;
                        }
                    }
                    else {
                        if (limit_control >= -2147483648) {
                            *number *= 10;
                            *number += sign * (procceding_option[k] - '0');
                        }
                        else {
                            return 1;
                        }
                    }
                }
                else if (procceding_option[k] == '-' && k == 0) {
                    sign = -1;
                }
                else {
                    return 1;
                }
            }
        }
    }
    return 0;
}

void HandlerOptH(int number) {
    int cnt = 0;

    if (number == 0) {
        printf("It is impossible to divide by 0\n");
        return;
    }

    for (int i = 1; i <= 100; ++i) {
        if (!(i % number)) {
            printf("%d\n", i);
            cnt++;
        }
    }

    if (cnt == 0) {
        printf("No numbers multiple of %d\n", number);
    }
}

void HandlerOptP(int number) {
    int flag = 1;

    if (number <= 1) {
        printf("%d is neither prime nor composite\n", number);
        return;
    }

    for (int i = 2; i <= sqrt(number); ++i) {
        if (!(number % i)) {
            flag = 0;
        }
    }

    if (flag) {
        printf("%d is simple\n", number);
    }
    else {
        printf("%d is not simple\n", number);
    }
}

void Conversion(long long int number, int radix, char* result) {
    char vsp[32];
    int index = 0;

    if (number == 0) {
        printf("0\n");
        return;
    }

    if (number < 0) {
        number = -number;
    }

    while (number > 0) {
        int num = number % radix;
        if (num < 10) {
            vsp[index++] = '0' + num;
        }
        else {
            vsp[index++] = 'A' + num - 10;
        }
        number /= radix;
    }
    for (int i = index - 1; i >= 0; i--) {
        result[index - i - 1] = vsp[i];
    }
    result[index] = '\0';
}

void HandlerOptS(int number) {
    char result[32] = { 0 };
    if (number < 0) {
        printf("- ");
    }
    Conversion(number, 16, result);
    for (int i = 0; result[i] != '\0'; ++i) {
        printf("%c ", result[i]);
    }
    printf("\n");
}

void HandlerOptE(int number) {
    if (abs(number) > 10) {
        printf("Incorrect x");
        return;
    }

    for (double i = 1; i <= 10; ++i) {
        if (number > 0) {
            for (double j = 1; j <= number; ++j) {
                printf("%15.0lf", pow(i, j));
            }
        }
        else {
            for (double j = number; j <= 1; ++j) {
                printf("%12.9lf", pow(i, j));
            }
        }
        printf("\n");
    }
}

void HandlerOptA(int number) {
    if (number <= 0) {
        printf("x is not a natural number");
        return;
    }

    int sum = (1 + number) * number / 2;
    printf("%d\n", sum);
}

void HandlerOptF(int number) {
    unsigned long long factorial = 1;
    unsigned long long vsp = 1;

    if (number < 0) {
        printf("The factorial is not defined for negative numbers");
        return;
    }

    for (int i = 2; i <= number; ++i) {
        vsp = factorial;
        factorial *= i;
        if (factorial / i != vsp) {
            printf("Overflow\n");
            return;
        }
    }
    printf("%llu\n", factorial);
}

int main(int argc, char** argv) {
    kOpts opt;
    int procceed_number = 0;
    void (*handlers[6])(int) = { HandlerOptH, HandlerOptP, HandlerOptS,
                                HandlerOptE, HandlerOptA, HandlerOptF };

    if (GetOpts(argc, argv, &opt, &procceed_number)) {
        printf("Incorrect option\n");
        return 1;
    }

    handlers[opt](procceed_number);

    return 0;
}
