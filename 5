#include <math.h>
#include <stdio.h>

int GetEpsilon(int argc, char** argv, double numbers[]) {
  if (argc != 3) {
    return 1;
  }

  for (int i = 1; i <= 2; ++i) {
    double sign = 1;
    int index = 0;
    int having_real_num = 0;
    const char* number = argv[i];

    for (int k = 0; number[k]; ++k) {
      if (number[k] >= '0' && number[k] <= '9') {
        numbers[i - 1] *= 10;
        numbers[i - 1] += number[k] - '0';
        having_real_num = 1;
      } else if (number[k] == '.') {
        if (!(number[k + 1] >= '0' && number[k + 1] <= '9')) {
          return 1;
        }
        index = k + 1;
        break;
      } else if (number[k] == '-' && k == 0) {
        if (!(number[k + 1] >= '0' && number[k + 1] <= '9')) {
          return 1;
        }
        sign = -1;
      } else {
        return 1;
      }
    }

    double fractional_part = 0.1;
    if (index > 1) {  // если точка стоит не первой
      for (int j = index; number[j]; ++j) {
        if (number[j] >= '0' && number[j] <= '9') {
          numbers[i - 1] += (number[j] - '0') * fractional_part;
          fractional_part *= 0.1;
        } else {  // если что угодно, кроме цифры и точки, выводим ошибку
          return 1;
        }
      }
    } else if (having_real_num == 0) {  // если точки нет, но целая часть не
                                        // менялась, выводим ошибку
      return 1;
    }

    if (sign == -1) {
      if (numbers[i - 1] == 0 || i == 1) {
        return 1;
      } else {
        numbers[i - 1] = sign * numbers[i - 1];
      }
    }
  }
  return 0;
}

double SumA(double epsilon, double x) {
  double n = 0;
  double last_result = 0;
  double part = 1;
  double result = 1;
  while (fabs(result - last_result) > epsilon) {
    n++;
    last_result = result;
    part *= x / n;
    result += part;
  }
  return result;
}

double SumB(double epsilon, double x) {
  double n = 0;
  double last_result = 0;
  double part = 1;
  double result = 1;
  while (fabs(result - last_result) > epsilon) {
    n++;
    last_result = result;
    part *= (-x * x / (4 * n * n - 2 * n));
    result += part;
  }
  return result;
}

double SumC(double epsilon, double x) {
  double n = 0;
  double last_result = 0;
  double part = 1;
  double result = 1;
  if (fabs(x) >= 1) {
    return -1;
  } else {
    while (fabs(result - last_result) > epsilon) {
      n++;
      last_result = result;
      part *= 9 * n * n * x * x / (9 * n * n - 9 * n + 2);
      result += part;
    }
    return result;
  }
}

double SumD(double epsilon, double x) {
  double n = 1;
  double last_result = 0;
  double part = -x * x / 2.0;
  double result = -x * x / 2.0;
  if (fabs(x) >= 1) {
    return -1;
  } else {
    while (fabs(result - last_result) > epsilon) {
      n++;
      last_result = result;
      part *= (-x * x * (2 * n - 1) / (2.0 * n));
      result += part;
    }
    return result;
  }
}

int main(int argc, char** argv) {
  double numbers[2] = {0};
  double (*handlers[4])(double, double) = {SumA, SumB, SumC, SumD};

  if (GetEpsilon(argc, argv, numbers)) {
    printf("%s", "Incorrect number");
    return 1;
  }

  for (int i = 0; i <= 3; i++) {
    if (handlers[i](numbers[0], numbers[1]) == -1) {
      printf("The sum of the series diverges\n");
    }else printf("%.10lf\n", handlers[i](numbers[0], numbers[1]));
  }
  return 0;
}
