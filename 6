#include <stdio.h>
#include <math.h>

int GetEpsilon(int argc, char** argv, double* number) {
  if (argc != 2) {
    return 1;
  }
  const char* real_number = argv[1];
  int index = 0; // индекс первой после точки цифры
  int having_real_num = 0;
  for (int i = 0; real_number[i]; ++i) {
    if (real_number[i] >= '0' && real_number[i] <= '9') {
      *number *= 10;
      *number += real_number[i] - '0';
      having_real_num = 1;
    } else if (real_number[i] == '.') {
      if (!(real_number[i + 1] >= '0' && real_number[i + 1] <= '9')) { // если после точки 
                                                                       // ничего нет или там 
                                                                       // что-то, кроме цифры,
                                                                       // то выводим ошибку
        return 1;
      }
      index = i + 1;
      break;
    } else { // если что угодно, кроме цифры и точки, выводим ошибку
      return 1;
    }
  }
  double fractional_part = 0.1;
  if (index > 1) { // если точка стоит не первой
    for (int j = index; real_number[j]; ++j) {
      if (real_number[j] >= '0' && real_number[j] <= '9') {
        *number += (real_number[j] - '0') * fractional_part;
        fractional_part *= 0.1;
      } else { // если что угодно, кроме цифры и точки, выводим ошибку
        return 1;
      }
    }
  } else if (having_real_num == 0) { // если точки нет, но целая часть не менялась, выводим ошибку
    return 1;
  }
  return 0;
}

double FunctionA(double x) { return log(1 + x) / x; }
double FunctionB(double x) { return exp(-pow(x, 2.0) / 2.0); }
double FunctionC(double x) { return log(1.0 / (1.0 - x)); }
double FunctionD(double x) { return pow(x, x); }

double Integral(double (*functions)(double), double number) {
  double a = 0.0;
  double b = 1.0;
  if (!(isfinite(functions(a)))) {
    a += number;
  }
  if (!(isfinite(functions(b)))) {
    b -= number;
  }
  long long int partition = 1;
  double part_of_ab = (b - a) / partition;
  double last_result = 0.0;
  double result = part_of_ab * functions(a + part_of_ab / 2.0);

  while (fabs(result - last_result) > number) {
    last_result = result;
    result = 0.0;
    partition *= 2;    
    part_of_ab = (b - a) / partition;

    for (int i = 0; i < partition; i++) {
      result += functions(a + part_of_ab / 2.0 + i * part_of_ab);
    }

    result *= part_of_ab;
  }
  
  return result;
}

int main(int argc, char** argv) {
  double procceed_number = 0;
  double (*handlers[4])(double) = {FunctionA, FunctionB, FunctionC, FunctionD};

  if (GetEpsilon(argc, argv, &procceed_number)) {
    printf("%s", "Incorrect epsilon");
    return 1;
  }

  for (int i = 0; i <= 3; i++) {
    printf("%.9lf\n", Integral(handlers[i], procceed_number));
  }
  return 0;
}
