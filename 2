#include <math.h>
#include <stdio.h>

int GetEpsilon(int argc, char** argv, double* number) {
    if (argc != 2) {
        return 1;
    }
    const char* real_number = argv[1];
    int index = 0;  // индекс первой после точки цифры
    int having_real_num = 0;
    for (int i = 0; real_number[i]; ++i) {
        if (real_number[i] >= '0' && real_number[i] <= '9') {
            *number *= 10;
            *number += real_number[i] - '0';
            having_real_num = 1;
        } else if (real_number[i] == '.') {
            if (!(real_number[i + 1] >= '0' && real_number[i + 1] <= '9')) {  // если после точки ничего нет или там
                                                                              // что-то, кроме цифры, то выводим ошибку
                return 1;
            }
            index = i + 1;
            break;
        } else {  // если что угодно, кроме цифры и точки, выводим ошибку
            return 1;
        }
    }
    double fractional_part = 0.1;

    if (index > 1) {  // если точка стоит не первой
        for (int j = index; real_number[j]; ++j) {
            if (real_number[j] >= '0' && real_number[j] <= '9') {
                *number += (real_number[j] - '0') * fractional_part;
                fractional_part *= 0.1;
            } else {  // если что угодно, кроме цифры и точки, выводим ошибку
                return 1;
            }
        }
    } else if (having_real_num == 0) {  // если точки нет, но целая часть не менялась, выводим ошибку
        return 1;
    }

	if (*number <= 0.0) { return 1; }
    return 0;
}

void Equation(double epsilon, double a, double b, double* middle, double (*func)(double)) {
	while (b - a > epsilon) {
		*middle = (a + b) / 2;
		if (func(b) * func(*middle) < epsilon) {
			a = *middle;
		} else {
			b = *middle;
		}
	}
}
void Iteration(double epsilon, double last_result, double* result, double (*func)(double)) {
	while (fabs(*result - last_result) > epsilon) {
		last_result = *result;
		*result = func(last_result);
	}
}

double PartSeriesSqrt(double n);
void Series(double epsilon, double n, double last_result, double member, double (*func)(double),
	double* result) {
	while (fabs(*result - last_result) > epsilon) {
		n++;
		last_result = *result;
		member *= func(n);
		if (func != PartSeriesSqrt) {
			*result += member;
		} else {
			*result *= member;
		}
	}
}

double FunctionE(double x) { return log(x) - 1; }
double EquationE(double epsilon) {
    double a = 2.0;
    double b = 3.0;
	double middle = (a + b) / 2;
	Equation(epsilon, a, b, &middle, FunctionE);
	return middle;
}
double PartSeriesE(double n) { return 1 / n; }
double SeriesE(double epsilon) {
    double n = 0.0;
    double last_result = 0.0;
    double member = 1.0;
    double result = 1.0;
	Series(epsilon, n, last_result, member, PartSeriesE, &result);
    return result;
}
double LimitE(double epsilon) {
    double n = 1.0;
    double result = 2.0;
    double last_result = 0.0;
    while (fabs(result - last_result) > epsilon) {
        n++;
        last_result = result;
        result = pow(1.0 + 1.0 / n, n);
    }
    return result;
}

double FunctionPi(double x) { return cos(x) + 1; }
double EquivalentFunctionPi(double x) { return x + 1.4 * (cos(x) + 1); }
double EquationPi(double epsilon) {
    double a = 3.0;
    double b = 4.0;
    double middle = (a + b) / 2;
	Equation(epsilon, a, b, &middle, FunctionPi);
	return middle;
}
double EquationIterationPi(double epsilon) {
	double last_result = 3.0;
	double result = EquivalentFunctionPi(last_result);
	Iteration(epsilon, last_result, &result, EquivalentFunctionPi);
	return result;
}
double PartSeriesPi(double n) { return -1 + 2 / (2 * n - 1); }
double SeriesPi(double epsilon) {
    double n = 1.0;
    double last_result = 0.0;
    double member = 4.0;
    double result = 4.0;
	Series(epsilon, n, last_result, member, PartSeriesPi, &result);
    return result;
}
double LimitPi(double epsilon) {
    double n = 1.0;
    double result = 4.0;
    double last_result = 0.0;
    while (fabs(result - last_result) >= epsilon) {
        n++;
        last_result = result;
        result *= 4.0 * n * (n - 1.0) / ((2.0 * n - 1.0) * (2.0 * n - 1.0));
    }
    return result;
}

double FunctionLn(double x) { return exp(x) - 2; }
double EquationLn(double epsilon) {
    double a = 0.0;
    double b = 1.0;
    double middle = (a + b) / 2;
	Equation(epsilon, a, b, &middle, FunctionLn);
	return middle;
}
double PartSeriesLn(double n) { return -1 + 1 / n; }
double SeriesLn(double epsilon) {
    double n = 1.0;
    double last_result = 0.0;
    double member = 1.0;
    double result = 1.0;
	Series(epsilon, n, last_result, member, PartSeriesLn, &result);
    return result;
}
double LimitLn(double epsilon) {
    double n = 1.0;
    double result = 1.0;
    double last_result = 0.0;
    while (fabs(result - last_result) > epsilon) {
        n++;
        last_result = result;
        result = n * (pow(2, 1 / n) - 1);
    }
    return result;
}

double FunctionSqrt(double x) { return x * x - 2; }
double EquationSqrt(double epsilon) {
    double a = 1.0;
    double b = 2.0;
    double middle = (a + b) / 2;
	Equation(epsilon, a, b, &middle, FunctionSqrt);
	return middle;
}
double PartSeriesSqrt(double k) { return pow(2, -pow(2, -k)); }
double SeriesSqrt(double epsilon) {
    double k = 2.0;
    double last_result = 0.0;
    double member = pow(2.0, 1.0 / 4.0);
    double result = pow(2.0, 1.0 / 4.0);
    Series(epsilon, k, last_result, member, PartSeriesSqrt, &result);
    return result;
}
double LimitSqrt(double epsilon) {
    double n = 1.0;
    double result = -0.5;
    double last_result = 0.0;
    while (fabs(result - last_result) > epsilon) {
        n++;
        last_result = result;
        result = last_result - (last_result * last_result) / 2 + 1;
    }
    return result;
}

int main(int argc, char** argv) {
    double proceed_number = 0;
    double (*handlers[12])(double) = {LimitE,  SeriesE,  EquationE,  LimitPi,   SeriesPi,   EquationIterationPi,
                                      LimitLn, SeriesLn, EquationLn, LimitSqrt, SeriesSqrt, EquationSqrt};

    if (GetEpsilon(argc, argv, &proceed_number)) {
        printf("%s", "Incorrect epsilon\n");
        return 1;
    }

    for (int i = 0; i < 12; i++) {
        printf("%.10lf\n", handlers[i](proceed_number));
        if (i % 3 == 2 && i != 11) printf("\n");
    }
    return 0;
}
