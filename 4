#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <locale.h>
typedef enum kOpts { OPT_D, OPT_I, OPT_S, OPT_A } kOpts;

int GetOpts(int argc, char** argv, kOpts* option, char** input, char* output) {
  if (!(argc == 3 || argc == 4)) {
    return 1;
  }

  const char* proceeding_option = argv[1];
  int index = 0;
  long long int limit_control = 0;
  if (proceeding_option[0] == '/' || proceeding_option[0] == '-') {
    if (proceeding_option[1] == 'n') {
      index++;
      if (argc != 4 || proceeding_option[3]) return 1;
    } else if (argc != 3 || proceeding_option[2]) {
      return 1;
    }
    switch (proceeding_option[index + 1]) {
      case 'd':
        *option = OPT_D;
        break;
      case 'i':
        *option = OPT_I;
        break;
      case 's':
        *option = OPT_S;
        break;
      case 'a':
        *option = OPT_A;
        break;
      default:
        return 1;
    }
  } else return 1;
  *input = argv[2];
  if (!index) { // если n нет, то добавляем префикс
    output[0] = 'o';
    output[1] = 'u';
    output[2] = 't';
    output[3] = '_';
  	int slash = -1;
  	for (int i = 0; argv[2][i]; i++) {
  		if (argv[2][i] == '\\' || argv[2][i] == '/') {
  			slash = i;
  		}
  	}
    for (int i = slash + 1; argv[2][i]; i++) {
      if (i >= FILENAME_MAX - 4) return 1;
      output[i - slash + 3] = argv[2][i];
      if (!(argv[2][i + 1])) output[i - slash + 5] = '\0';
    }
  } else {
    int not_same = 0;
    char input_path[PATH_MAX];
    char output_path[PATH_MAX];
    realpath(argv[2], input_path);
    realpath(argv[3], output_path);
    for (int i = 0; (input_path[i] && output_path[i]); i++) {
        if(input_path[i] != output_path[i]) not_same = 1;
    }
    if (!not_same) {return 1;}
    for (int i = 0; argv[3][i]; i++) {
      if (i >= FILENAME_MAX) return 1;
      output[i] = argv[3][i];
      if (!(argv[3][i + 1])) output[i + 1] = '\0';
    }
  }
  return 0;
}

void HandlerOptD(char* input_file, char* output_file) {
  FILE* input = NULL;
  FILE* output = NULL;
  char sym;
  if ((input = fopen(input_file, "r")) == NULL) {
    printf("Failed to open input file\n");
    return;
  }
  if ((output = fopen(output_file, "w")) == NULL) {
    printf("Failed to open output file\n");
    fclose(input);
    return;
  }
  while ((sym = fgetc(input)) != EOF) {
    if (!isdigit(sym)) {
      fputc(sym, output);
    }
  }
  fclose(input);
  fclose(output);
}

void HandlerOptI(char* input_file, char* output_file) {
  FILE* input = NULL;
  FILE* output = NULL;
  char sym;
  int count = 0;
  if ((input = fopen(input_file, "r")) == NULL) {
    printf("Failed to open input file\n");
    return;
  }
  if ((output = fopen(output_file, "w")) == NULL) {
    printf("Failed to open output file\n");
    fclose(input);
    return;
  }
  while ((sym = fgetc(input)) != EOF) {
    if (sym != '\n') {
      if (isalpha(sym)) {
        count++;
      }
    } else {
      fprintf(output, "%d\n", count);
      count = 0;
    }
  }
  fprintf(output, "%d\n", count);
  fclose(input);
  fclose(output);
}

void HandlerOptS(char* input_file, char* output_file) {
  setlocale(LC_ALL, "ru_RU.UTF-8");
  FILE* input = NULL;
  FILE* output = NULL;
  wchar_t sym;
  int count = 0;
  if ((input = fopen(input_file, "rb")) == NULL) {
    printf("Failed to open input file\n");
    return;
  }
  if ((output = fopen(output_file, "w")) == NULL) {
    printf("Failed to open output file\n");
    fclose(input);
    return;
  }
  while ((sym = fgetwc(input)) != WEOF) {
    if (sym != '\n') {
      if (!(isalpha(sym) || isdigit(sym) || sym == ' ')) {
        count++;
      }
    } else {
      fprintf(output, "%d\n", count);
      count = 0;
    }
  }
  fprintf(output, "%d\n", count);
  fclose(input);
  fclose(output);
}

void Conversion(char sym, int radix, char* result) {
  char vsp[2] = {0};
  int index = 0;
  int n = sym;

  while (n > 0) {
    int ost = n % radix;
    if (ost < 10) {
      vsp[index++] = '0' + ost;
    } else {
      vsp[index++] = 'A' + ost - 10;
    }
    n /= radix;
  }
  for (int i = index - 1; i >= 0; i--) {
    if (index == 1) {
      result[i] = '0';
      result[index] = vsp[i];
    } else {
      result[index - i - 1] = vsp[i];
    }
  }
  result[2] = '\0';
}

void HandlerOptA(char* input_file, char* output_file) {
  FILE* input = NULL;
  FILE* output = NULL;
  char sym;
  char res[3] = {0};
  if ((input = fopen(input_file, "r")) == NULL) {
    printf("Failed to open input file\n");
    return;
  }
  if ((output = fopen(output_file, "w")) == NULL) {
    printf("Failed to open output file\n");
    fclose(input);
    return;
  }
  while ((sym = fgetc(input)) != EOF) {
      if (sym == '\r') {continue;}
    if (!(sym >= 0 && sym <= 127)) {
      fprintf(output, "?");
    } else {
      if (!isdigit(sym)) {
        Conversion(sym, 16, res);
        for (int i = 0; res[i] != '\0'; ++i) {
          fprintf(output, "%c", res[i]);
        }
      } else {
        fputc(sym, output);
      }
    }
  }
  fprintf(output, "\nNon-ASCII characters are replaced by ??");
  fclose(input);
  fclose(output);
}

int main(int argc, char** argv) {
  kOpts opt;
  char* input_file;
  char output_file[FILENAME_MAX];
  void (*handlers[4])(char*, char*) = {HandlerOptD, HandlerOptI, HandlerOptS,
                              HandlerOptA};

  if (GetOpts(argc, argv, &opt, &input_file, output_file)) {
    printf("Incorrect option\n");
    return 1;
  }

  handlers[opt](input_file, output_file);

  return 0;
}
