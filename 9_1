#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <time.h>

int GetNums(int argc, char** argv, int numbers[]) {
  if (argc != 3) {
    return 1;
  }

  for (int i = 1; i <= 2; ++i) {
    const char* proceeding_number = argv[i];
    int sign = 1;
    long long int limit_control = 0;
    for (int k = 0; proceeding_number[k]; ++k) {
      if (proceeding_number[k] >= '0' && proceeding_number[k] <= '9') {
        limit_control =
            limit_control * 10 + sign * (proceeding_number[k] - '0');
        if (sign == 1) {
          if (limit_control <= INT_MAX) {
            numbers[i - 1] *= 10;
            numbers[i - 1] += sign * (proceeding_number[k] - '0');
          } else {
            return 1;
          }
        } else {
          if (limit_control >= INT_MIN) {
            numbers[i - 1] *= 10;
            numbers[i - 1] += sign * (proceeding_number[k] - '0');
          } else {
            return 1;
          }
        }
      } else if (proceeding_number[k] == '-' && k == 0) {
        sign = -1;
      } else {
        return 1;
      }
    }
  }
  if (numbers[0] > numbers[1]) return 1;
  return 0;
}

void SearchMinMax(int numbers[2]) {
  const int size = 16;
  int array[size];
  int a = numbers[0];
  int b = numbers[1];
  int vsp = 0, index_min = 0, index_max = 0;
  for (int i = 0; i < size; i++) {
    array[i] = a + rand() % (b - a + 1);
    printf("%d ", array[i]);
    if (array[i] > array[index_max]) {
      index_max = i;
    }
    if (array[i] < array[index_min]) {
      index_min = i;
    }
  }
  printf("\n");
  printf("Max: %d\n", array[index_max]);
  printf("Min: %d\n", array[index_min]);
  if (size > 1) {
    vsp = array[index_min];
    array[index_min] = array[index_max];
    array[index_max] = vsp;
  }
  for (int j = 0; j < size; j++) {
    printf("%d ", array[j]);
  }
}

int main(int argc, char** argv) {
  int* arr;
  int range[2] = {0};
  if (GetNums(argc, argv, range)) {
    printf("Incorrect a and b\n");
    return 1;
  }

  srand(time(NULL));
  SearchMinMax(range);

  return 0;
}
