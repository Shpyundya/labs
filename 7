#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

typedef enum kOpts { OPT_R, OPT_A } kOpts;

int GetOpts(int argc, char** argv, kOpts* option, char* input[], char** output) {
    if (!((argc >= 4) && (argc <= 5))) {
        return 1;
    }

    const char* procceding_option = argv[1];
    int not_same1 = 0;
    int not_same2 = 0;
    if (((procceding_option[0] == '/') || (procceding_option[0] == '-')) && !(procceding_option[2])) {
        char input_path1[PATH_MAX];
        char input_path2[PATH_MAX];
        char output_path[PATH_MAX];
        realpath(argv[2], input_path1);
        realpath(argv[3], input_path2);
        realpath(argv[4], output_path);
    	for (int i = 0; (input_path1[i] && output_path[i]); i++) {
            if (input_path1[i] != output_path[i]) not_same1 = 1;
        }
        for (int i = 0; (input_path2[i] && output_path[i]); i++) {
            if (input_path2[i] != output_path[i]) not_same2 = 1;
        }
        if (!not_same1 || !not_same2) return 1;
        switch (procceding_option[1]) {
            case 'r':
                *option = OPT_R;
                if (argc != 5) {
                    return 1;
                }
                input[0] = argv[2];
                input[1] = argv[3];
                *output = argv[4];
                break;
            case 'a':
                *option = OPT_A;
                if (argc != 4) {
                    return 1;
                }
                input[0] = argv[2];
                *output = argv[3];
                break;
            default:
                return 1;
        }
    } else {
        return 1;
    }

    return 0;
}

char* ReadLexeme(FILE* input) {
    int capacity = 10;  // Начальная емкость массива
    int index = 0;
    char* buf = (char*)malloc(capacity * sizeof(char));
    if (buf == NULL) {
        return NULL;  // Ошибка выделения памяти
    }

    char sym;
    while ((sym = fgetc(input)) != EOF && (sym == ' ' || sym == '\t' || sym == '\n' || sym == '\r')) {
    }

    if (sym == EOF) {
        free(buf);
        return NULL;
    }

    buf[index++] = sym;

    while ((sym = fgetc(input)) != EOF && sym != ' ' && sym != '\t' && sym != '\n' && sym != '\r') {
        if (index >= capacity - 1) {
            capacity *= 2;
            char* new_buf = (char*)realloc(buf, capacity * sizeof(char));
            if (new_buf == NULL) {
                free(buf);
                return NULL;  // Ошибка выделения памяти
            }
            buf = new_buf;
        }
        buf[index++] = sym;
    }

    buf[index] = '\0';
    return buf;
}

void HandlerOptR(char* input_file[2], char* output_file) {
    FILE* input1 = NULL;
    FILE* input2 = NULL;
    FILE* output = NULL;
    char* lexeme1 = NULL;
    char* lexeme2 = NULL;
    int parity = 1;
    if ((input1 = fopen(input_file[0], "r")) == NULL) {
        printf("Failed to open input file\n");
        return;
    }
    if ((input2 = fopen(input_file[1], "r")) == NULL) {
        printf("Failed to open input file\n");
        return;
    }
    if ((output = fopen(output_file, "w")) == NULL) {
        printf("Failed to open output file\n");
        fclose(input1);
        fclose(input2);
        return;
    }

    while (1) {
        if (parity % 2) {
            lexeme1 = ReadLexeme(input1);
            if (lexeme1 != NULL) {
                fprintf(output, "%s ", lexeme1);
                free(lexeme1);
                parity = (parity + 1) % 2;
                continue;
            } else {
                parity = (parity + 1) % 2;
            }
        }
        if (!(parity % 2)) {
            lexeme2 = ReadLexeme(input2);
            if (lexeme2 != NULL) {
                fprintf(output, "%s ", lexeme2);
                free(lexeme2);
                parity = (parity + 1) % 2;
                continue;
            }
        }

        parity = (parity + 1) % 2;

        if (lexeme1 == NULL && lexeme2 == NULL) {
            break;
        }
        if (lexeme1 == NULL) {
            while ((lexeme2 = ReadLexeme(input2)) != NULL) {
                fprintf(output, "%s ", lexeme2);
                free(lexeme2);
            }
            break;
        }
        if (lexeme2 == NULL) {
            while ((lexeme1 = ReadLexeme(input1)) != NULL) {
                fprintf(output, "%s ", lexeme1);
                free(lexeme1);
            }
            break;
        }
    }

    fclose(input1);
    fclose(input2);
    fclose(output);
}

void Conversion(char sym, int radix, char* result) {
    const int base = radix;
    char vsp[32] = {0};
    int index = 0;
    int n = sym;

    while (n > 0) {
        int ost = n % radix;
        if (ost < 10) {
            vsp[index++] = '0' + ost;
        } else {
            vsp[index++] = 'A' + ost - 10;
        }
        n /= radix;
    }
    for (int i = index - 1; i >= 0; i--) {
        if (index == 1) {
            result[i] = '0';
            result[index] = vsp[i];
        } else {
            result[index - i - 1] = vsp[i];
        }
    }
    result[index] = '\0';
}

void HandlerOptA(char* input_file[2], char* output_file) {
    FILE* input = NULL;
    FILE* output = NULL;
    char* lexeme = NULL;
    char res_lexeme[400] = {0};
    int order = 0;
    if ((input = fopen(input_file[0], "r")) == NULL) {
        printf("Failed to open input file\n");
        return;
    }
    if ((output = fopen(output_file, "w")) == NULL) {
        printf("Failed to open output file\n");
        fclose(input);
        return;
    }

    lexeme = ReadLexeme(input);
    order++;
    while (lexeme != NULL) {
        if (!(order % 10)) {
            for (int i = 0; lexeme[i] != '\0'; i++) {
                lexeme[i] = tolower(lexeme[i]);
                if (!(lexeme[i] >= 0 && lexeme[i] <= 127)) {
                    fprintf(output, "?");
                } else {
                    Conversion(lexeme[i], 4, res_lexeme);
                    for (int j = 0; res_lexeme[j] != '\0'; j++) {
                        fprintf(output, "%c", res_lexeme[j]);
                    }
                }
            }
            order = 0;
        } else if (!(order % 2) && (order % 5)) {
            for (int i = 0; lexeme[i] != '\0'; i++) {
                lexeme[i] = tolower(lexeme[i]);
                fprintf(output, "%c", lexeme[i]);
            }
        } else if ((order % 2) && !(order % 5)) {
            for (int i = 0; lexeme[i] != '\0'; i++) {
                if (!(lexeme[i] >= 0 && lexeme[i] <= 127)) {
                    fprintf(output, "?");
                } else {
                    Conversion(lexeme[i], 8, res_lexeme);
                    for (int j = 0; res_lexeme[j] != '\0'; j++) {
                        fprintf(output, "%c", res_lexeme[j]);
                    }
                }
            }
        } else {
            fprintf(output, "%s", lexeme);
        }
        if (lexeme[0] != '\0') fprintf(output, " ");
        lexeme = ReadLexeme(input);
        order++;
    }
    fclose(input);
    fclose(output);
}

int main(int argc, char** argv) {
    kOpts opt;
    char* input_file[2];
    char* output_file;
    void (*handlers[2])(char**, char*) = {HandlerOptR, HandlerOptA};
    if (GetOpts(argc, argv, &opt, input_file, &output_file)) {
        printf("Incorrect option\n");
        return 1;
    }

    handlers[opt](input_file, output_file);

    return 0;
}
