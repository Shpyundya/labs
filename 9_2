#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int compare(const void *a, const void *b) { return (*(int *)a - *(int *)b); }

void NewArray() {
	int size_a = 10 + rand() % (10000 - 10 + 1);
	int size_b = 10 + rand() % (10000 - 10 + 1);
	int *A = (int *)malloc(size_a * sizeof(int));
	int *B = (int *)malloc(size_b * sizeof(int));
	int *C = (int *)malloc(size_a * sizeof(int));
	if (A == NULL || B == NULL || C == NULL) {
		printf("Memory allocation error\n");
		return;
	}
	printf("Array A:\n");
	for (int i = 0; i < size_a; i++) {
		A[i] = -1000 + rand() % (1000 - (-1000) + 1);
		printf("%d ", A[i]);
	}
	printf("\n\nArray B:\n");
	for (int i = 0; i < size_b; i++) {
		B[i] = -1000 + rand() % (1000 - (-1000) + 1);
		printf("%d ", B[i]);
	}
	qsort(B, size_b, sizeof(int), compare);
	printf("\n\nArray C    Array A    Close to A\n");
	for (int i = 0; i < size_a; i++) {
		int left = 0;
		int right = size_b - 1;
		int close_to_a = B[left];
		while (left <= right) {
			int middle = left + (right - left) / 2;
			if (abs(B[middle] - A[i]) < abs(close_to_a - A[i])) {
				close_to_a = B[middle];
			}
			if (B[middle] < A[i]) {
				left = middle + 1;
			} else {
				right = middle - 1;
			}
		}
		C[i] = A[i] + close_to_a;
		printf("%7d%11d%14d\n", C[i], A[i], close_to_a);
	}
	free(A);
	free(B);
	free(C);
}

int main() {
	srand(time(NULL));
	NewArray();
	return 0;
}
